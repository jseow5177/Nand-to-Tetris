/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Preset x input
    // 1. If zx is 1, x becomes all zeros
    Mux16 (a=x, b=false, sel=zx, out=zxOut);
    // 2. If nx is 1, negates the output of zx
    Not16 (in=zxOut, out=zxOutNot);
    Mux16 (a=zxOut, b=zxOutNot, sel=nx, out=nxOut);

    // Preset y input
    // 1. If zy is 1, y becomes all zeros
    Mux16 (a=y, b=false, sel=zy, out=zyOut);
    Not16 (in=zyOut, out=zyOutNot);
    // 2. If ny is 1, negates the output of zy
    Mux16 (a=zyOut, b=zyOutNot, sel=ny, out=nyOut);

    // Choose between + or And
    // If f is 1, add the outputs of nx and ny
    // Else, and the outputs of nx and ny
    And16 (a=nxOut, b=nyOut, out=xAndy);
    Add16 (a=nxOut, b=nyOut, out=xAddy);
    Mux16 (a=xAndy, b=xAddy, sel=f ,out=preOut);

    // Check if to negate output
    Not16 (in=preOut, out=preOutNot);
    Mux16 (a=preOut, b=preOutNot, sel=no, out=out, out[0..7]=outFirstHalf, out[8..15]=outSecondHalf, out[15]=isNegative);

    // Compute zr
    Or8Way (in=outFirstHalf, out=orFirstHalf);
    Or8Way (in=outSecondHalf, out=orSecondHalf);
    Or (a=orFirstHalf, b=orSecondHalf, out=orResult);
    Not (in=orResult, out=zr);

    // Compute ng
    And (a=isNegative, b=true, out=ng);
}
